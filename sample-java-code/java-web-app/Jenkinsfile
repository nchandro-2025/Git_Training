pipeline {
    agent any

    environment {
        WAR_SOURCE = 'java-web-app/target/java-web-app-1.0-SNAPSHOT.war'
        WAR_DEST = 'ROOT.war'
        DOCKER_IMAGE = 'java-web-app'
        IMAGE_NAME = "java-web-app"
        DOCKER_REGISTRY = "nchandrocode1"
        DOCKER_CREDENTIALS_ID = "docker-hub-credentials"
        CONTAINER_PORT = "8080"
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    def gitRepoUrl = 'https://github.com/nchandro-2025/Git_Training.git'
                    checkout([$class: 'GitSCM', 
                        branches: [[name: '*/main']], 
                        userRemoteConfigs: [[url: gitRepoUrl]], 
                        extensions: [[$class: 'CleanBeforeCheckout'], [$class: 'CloneOption', noTags: false, shallow: true, depth: 1]]
                    ])
                }
            }
        }

        stage('Build WAR') {
            steps {
                dir('sample-java-code') {
                   dir('java-web-app') {
                       sh 'mvn clean package'
            }
        }
        }
}
	
        stage('Check WAR File') {
            steps {
                sh 'find . -name "*.war"'
                  }
        }

       
        stage('Show Dockerfile Location') {
            steps {
                sh 'echo "Current directory:"'
                sh 'pwd'
                sh 'echo "Listing files:"'
                sh 'ls -l'
                sh 'find . -name Dockerfile'
                  }
        }

         stage('Prepare WAR for Docker') {
            steps {
                sh "cp ${WAR_SOURCE} ${WAR_DEST}"
            }
        }


        stage('Build Docker Image') {
            steps {
                 dir('sample-java-code') {
                     dir('java-web-app') {
                         sh "docker build -t ${DOCKER_IMAGE} ."
                        }
                     }
                  }
         }

        stage('Run Docker Container') {
            steps {
                sh "docker run -d -p 8080:8080 ${DOCKER_IMAGE}"
            }
        }

        stage('Docker Push') {
            when {
                expression { return currentBuild.currentResult == 'SUCCESS' }
            }
            steps {
                echo 'Ready to push image if needed.'
                // Add docker push command here if required
            }
        }
    }

    post {
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
