
pipeline {
    agent any

    environment {
        WAR_SOURCE = 'sample-java-code/java-web-app/target/java-web-app-1.0-SNAPSHOT.war'
        WAR_DEST = 'sample-java-code/java-web-app/ROOT.war'
        DOCKER_IMAGE = 'java-web-app'
        DOCKER_BUILD_DIR = 'sample-java-code/java-web-app'
        APP_PORT = '8081'
    }

    stages {
        stage('Build WAR') {
            steps {
                dir('sample-java-code/java-web-app') {
                    sh 'mvn clean package'
                }
            }
        }

        stage('Prepare WAR for Docker') {
            steps {
                echo 'Renaming WAR file to ROOT.war...'
                sh "cp ${WAR_SOURCE} ${WAR_DEST}"
            }
        }

        stage('Cleanup Old Containers') {
            steps {
                echo "Stopping any container using port ${APP_PORT}..."
                sh '''
                    CONTAINER_ID=$(docker ps --filter "publish=8080" -q)
                    if [ ! -z "$CONTAINER_ID" ]; then
                        echo "Stopping container $CONTAINER_ID"
                        docker stop $CONTAINER_ID
                    else
                        echo "No container using port 8080 found."
                    fi
                '''
            }
        }

        stage('Build Docker Image') {
            steps {
                echo 'Building Docker image...'
                dir("${DOCKER_BUILD_DIR}") {
                    sh "docker build -t ${DOCKER_IMAGE} ."
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                echo 'Running Docker container...'
                sh "docker run -d -p ${APP_PORT}:8080 ${DOCKER_IMAGE}"
            }
        }

        stage('Docker Push') {
            when {
                expression { return currentBuild.currentResult == 'SUCCESS' }
            }
            steps {
                echo 'Docker image ready to be pushed (add credentials and registry info if needed).'
                // Example: sh "docker push your-registry/${DOCKER_IMAGE}"
            }
        }
    }

