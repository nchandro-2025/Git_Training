pipeline {
    agent any

    environment {
        IMAGE_NAME = "java-web-app"
        DOCKER_REGISTRY = "your-dockerhub-username"
        SONARQUBE_SERVER = "SonarQubeServer"
    }

    stages {
        stage('Clone') {
            steps {
                def gitRepoUrl = 'https://github.com/nchandro-2025/Git_Training.git'

                    checkout([$class: 'GitSCM', 
                        branches: [[name: '*/master']], 
                        userRemoteConfigs: [[url: gitRepoUrl]], 
                        extensions: [[$class: 'CleanBeforeCheckout'], [$class: 'CloneOption', noTags: false, shallow: true, depth: 1]]
                    ])
            }
        }

        stage('Build & Test') {
            steps {
                sh 'mvn clean install'
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQubeServer') {
                    sh 'mvn sonar:sonar -Dsonar.projectKey=java-web-app -Dsonar.host.url=http://your-sonarqube-url -Dsonar.login=your-sonarqube-token'
               }
            }
        }

        stage('Docker Build') {
            steps {
                sh 'docker build -t $DOCKER_REGISTRY/$IMAGE_NAME .'
            }
        }

        stage('Docker Push') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh 'echo $PASSWORD | docker login -u $USERNAME --password-stdin'
                    sh 'docker push $DOCKER_REGISTRY/$IMAGE_NAME'
                }
            }
        }

        stage('Deploy') {
            steps {
                sh 'docker run -d -p 8080:8080 $DOCKER_REGISTRY/$IMAGE_NAME'
            }
        }
    }
}
